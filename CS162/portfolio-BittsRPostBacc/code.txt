class OutOfTurn(Exception):
    pass

class InvalidSquare(Exception):
    pass

class InvalidPlayer(Exception):
    pass

Note: You can define your exception classes similar to this with your desired error message.
for eg:

class InvalidSquare(Exception):
    """Exception raised when the square location provided is invalid"""

    def __init__(self, square_location):
        self.square_location = square_location

    def __str__(self):
        return f"Invalid square location: {self.square_location}"

class OutofTurn(Exception):
    """Exception raised when a player tries to make a move out of turn"""
    pass


class InvalidPlayer(Exception):
    """Exception raised when an invalid player is selected"""
    pass

Checkers class:
class Checkers:
    def __init__(self):
        # initialize the board here
        self.board = [[None for _ in range(8)] for _ in range(8)]

    def create_player(self, player_name, piece_color):
        # Check if the player color is valid
        if piece_color != "Black" and piece_color != "White":
            raise InvalidPlayer("Invalid player color")

        # Check if the player name is unique
        for player in self.players:
            if player.name == player_name:
                raise InvalidPlayer("Player name already exists")

        # Create the player object
        player = Player(player_name, piece_color)
        self.players.append(player)

        return player


    def play_game(self, player_name, start_loc, dest_loc):
        # Get the player object based on their name
        player = self.get_player(player_name)
        if not player:
            raise InvalidPlayer(player_name)

        # Check if it is the player's turn
        if self.turn != player.color:
            raise OutOfTurn(player_name)

        # Check if start and dest locations are valid
        if not self.is_valid_location(start_loc) or not self.is_valid_location(dest_loc):
            raise InvalidSquare((start_loc, dest_loc))

        # Check if the player has a checker at the start location
        start_checker = self.get_checker(start_loc)
        if start_checker is None or start_checker.color != player.color:
            raise InvalidSquare(start_loc)

        # Try to move the checker
        captured = self.move_checker(start_loc, dest_loc)

        # Check if the move resulted in a promotion
        if self.is_promotion(dest_loc):
            self.promote_checker(dest_loc)

        # Check if the move resulted in a triple king
        if self.is_triple_king(dest_loc):
            self.triple_king(dest_loc)

        # Switch turns
        self.turn = "White" if self.turn == "Black" else "Black"

        return captured


    def get_checker_details(self, square_location):
        x, y = square_location

        # Check if square location is valid
        if not self.is_valid_square(square_location):
            raise InvalidSquare("Invalid square location")

        # Check if checker is present in the square
        checker = self.board[y][x]
        if checker is None:
            return None

        # Return the checker details
        if checker.color == "Black":
            if checker.is_king:
                if checker.is_triple_king:
                    return "Black_Triple_King"
                else:
                    return "Black_king"
            else:
                return "Black"
        else:
            if checker.is_king:
                if checker.is_triple_king:
                    return "White_Triple_King"
                else:
                    return "White_king"
            else:
                return "White"


    def print_board(self):
        """
        Prints the current board in the form of an array.
        """
        for i in range(self.size):
            row = []
            for j in range(self.size):
                piece = self.board[i][j]
                if piece is None:
                    row.append(None)
                else:
                    row.append(piece.color + ('_king' if piece.is_king else '') + ('_Triple_King' if piece.is_triple_king else ''))
            print(row)


    def game_winner(self):
        white_pieces = []
        black_pieces = []

        # Iterate over the board and add the pieces to their respective lists
        for row in self.board:
            for piece in row:
                if piece == "White" or piece == "White_king" or piece == "White_Triple_King":
                    white_pieces.append(piece)
                elif piece == "Black" or piece == "Black_king" or piece == "Black_Triple_King":
                    black_pieces.append(piece)

        # Check if either player has no pieces left
        if len(white_pieces) == 0:
            return "Black"
        elif len(black_pieces) == 0:
            return "White"

        # If both players have pieces left, the game has not ended
        return "Game has not ended"

class Player:
    def __init__(self, player_name, checker_color):
        # initialize the player object with the given name and checker color
        self.name = player_name
        self.color = checker_color
        self.kings = 0
        self.triple_kings = 0
        self.captured_pieces = 0

    def get_king_count(self):
        """
        Returns the number of kings that the player has on the board.
        """
        king_count = 0
        for checker in self.checkers:
            if checker.is_king():
                king_count += 1
        return king_count


     def get_triple_king_count(self):
        # return the number of triple kings the player has
        return self.triple_kings


    def get_captured_pieces_count(self):
        """
        Returns the number of captured pieces for the player.
        """
        return self.captured_pieces

import unittest
from checkers import Checkers, Player

class TestCheckers(unittest.TestCase):

    def test_board_setup(self):
        checkers = Checkers()
        board = checkers.board
        self.assertEqual(board[0], [0, 1, 0, 1, 0, 1, 0, 1])
        self.assertEqual(board[1], [1, 0, 1, 0, 1, 0, 1, 0])
        self.assertEqual(board[2], [0, 1, 0, 1, 0, 1, 0, 1])
        self.assertEqual(board[3], [0, 0, 0, 0, 0, 0, 0, 0])
        self.assertEqual(board[4], [0, 0, 0, 0, 0, 0, 0, 0])
        self.assertEqual(board[5], [-1, 0, -1, 0, -1, 0, -1, 0])
        self.assertEqual(board[6], [0, -1, 0, -1, 0, -1, 0, -1])
        self.assertEqual(board[7], [-1, 0, -1, 0, -1, 0, -1, 0])

    def test_move_piece(self):
        checkers = Checkers()
        checkers.move_piece((2, 1), (3, 0))
        board = checkers.board
        self.assertEqual(board[2][1], 0)
        self.assertEqual(board[3][0], 1)
        self.assertEqual(checkers.turn, -1)

    def test_invalid_move(self):
        checkers = Checkers()
        with self.assertRaises(Exception):
            checkers.move_piece((2, 1), (4, 0))

    def test_game_winner(self):
        checkers = Checkers()
        checkers.players[0].captured_pieces_count = 12
        winner = checkers.game_winner()
        self.assertEqual(winner, checkers.players[0])

    def test_player_triple_kings(self):
        player = Player('Alice', 1)
        player.king_count = 3
        triple_kings = player.get_triple_king_count()
        self.assertEqual(triple_kings, 1)

if __name__ == '__main__':
    unittest.main()
